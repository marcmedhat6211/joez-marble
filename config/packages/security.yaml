security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    role_hierarchy:
        ROLE_ADMIN: [ROLE_USER,ROLE_IMAGE_GALLERY]
        ROLE_SUPER_ADMIN: [ROLE_ADMIN]

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        user_provider:
            chain:
                providers: [ in_memory, app_user_provider ]
        in_memory:
            memory:
                users:
                    super@admin.pn: { password: $2y$13$vgxruMLQC5Y5eLIIUwEzducOYPANFnyuwZzDP0RMmsmB4xmbaX.ra , roles: [ 'ROLE_SUPER_ADMIN' ] }
        app_user_provider:
            id: App\UserBundle\Security\UserProvider
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            pattern: ^/
            lazy: true
            form_login:
                provider: user_provider
                enable_csrf: true
                login_path: app_user_login
                check_path: app_user_login
                default_target_path: dashboard
            remember_me:
                secret: '%env(APP_SECRET)%'
                lifetime: 604800 # 1 week in seconds
                path: /
            logout:
                path: app_user_logout
                target: fe_home
            user_checker: App\UserBundle\Security\UserChecker
            oauth:
                resource_owners:
                    facebook: "/login/check-facebook"
                    google: "/login/check-google"
                login_path: /login
                use_forward: false
                failure_path: /login
                provider: in_memory

                oauth_user_provider:
                    service: my.oauth_aware.user_provider.service

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/connect, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
